image: $HELM_REGISTRY_IMAGE:$HELM_REGISTRY_VERSION

variables:
  APP_NAME: vault-etcd
  REGISTRY_HOST: quay.io
  REGISTRY_ORG: samsung_cnct
  CHART_NAME: vault-etcd
  CHART_REGISTRY_URI: ${REGISTRY_HOST}/${REGISTRY_ORG}/${CHART_NAME}
  HELM_REGISTRY_IMAGE: quay.io/samsung_cnct/helm-registry-agent
  HELM_REGISTRY_VERSION: v0.7.4-helm_2.6

before_script:
  - helm registry login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY_HOST}
  - export CHART_VER=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//')
  - export CHART_REL=$(git rev-list --count v${CHART_VER}..HEAD 2>/dev/null )

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  artifacts:
    paths:
    - ${CHART_NAME}
  script:
  - build/build.sh

test:
  image: quay.io/samsung_cnct/kraken-tools:v0.8
  stage: test
  variables:
    NAMESPACE: ${APP_NAME}-test-${CI_PIPELINE_ID}
    RELEASE: ${APP_NAME}-${CI_PIPELINE_ID}
    DEPLOYMENT: ${APP_NAME}-${CI_PIPELINE_ID}-${APP_NAME}
  before_script:
  - mkdir /root/.kube
  - echo ${TEST_KUBECONFIG} | base64 -d > /root/.kube/config
  - helm init
  script:
  - build/test.sh
  - helm install --name ${RELEASE} --namespace ${NAMESPACE} ${APP_NAME}
  - kubectl rollout status sts/${DEPLOYMENT} -n ${NAMESPACE}
  - helm delete --purge ${RELEASE}
  - kubectl delete namespace ${NAMESPACE}

# beta channel is for internal tested release candidates
publish-beta:
  stage: publish
  only:
    - master
  script:
  - cd ${APP_NAME}
  - helm registry push ${CHART_REGISTRY_URI} -c beta

# prod channel is for official, vetted releases
publish-prod:
  stage: publish
  only:
    - /v[0-9]+\.[0-9]+\.[0-9]/
  script:
  - cd ${APP_NAME}
  - helm registry push ${CHART_REGISTRY_URI} -c prod

deploy-staging:
  stage: deploy
  only:
    - /v[0-9]+\.[0-9]+\.[0-9]/
  variables:
    CHART_REGISTRY_CHANNEL: prod
    NAMESPACE: ${APP_NAME}-staging
    GEN_CLUSTER_SIZE: 3
    GEN_NAMESPACE: ${APP_NAME}-staging
    GEN_CLIENT_NAMESPACES: ( ${GEN_NAMESPACE} "vault-staging" )
    GEN_SERVER_SECRET_NAME: etcd-server-tls
    GEN_PEER_SECRET_NAME: etcd-peer-tls
    GEN_CLIENT_SECRET_NAME: etcd-client-tls
    GEN_STATEFULSET_NAME: ${APP_NAME}-${APP_NAME}

  before_script:
  - mkdir /root/.kube
  - echo ${STAGING_KUBECONFIG} | base64 -d > /root/.kube/config
  - helm init --client-only
  - wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz
  - mkdir /go
  - export PATH=$PATH:/usr/local/go/bin:/go/bin
  - export GOPATH=/go
  - mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
  - apk add --no-cache --virtual .build-deps gcc build-base libtool sqlite-dev
  - go get -u github.com/cloudflare/cfssl/cmd/cfssl
  - go get -u github.com/cloudflare/cfssl/cmd/cfssljson
  - ./${APP_NAME}/tls-generator/generate-certs.sh

  script:
  - cd ${APP_NAME}
  - export HELM_OPTS="--install --namespace ${NAMESPACE}"
  - helm registry upgrade ${CHART_REGISTRY_URI}:${CHART_REGISTRY_CHANNEL} -- ${APP_NAME} ${HELM_OPTS}
